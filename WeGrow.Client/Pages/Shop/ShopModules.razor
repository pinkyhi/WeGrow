@using WeGrow.Core.Resources
@using WeGrow.Models.Entities
@using Microsoft.JSInterop
@using System.Text.Json

@code {
    [Inject] private IJSRuntime JsRuntime { get; set; }

    [Parameter]
    public List<ModuleEntity> ShopItems { get; set; }
    [Parameter]
    public List<ModuleEntity> CartItems { get; set; }
    [Parameter]
    public EventCallback<List<ModuleEntity>> CartItemsChanged { get; set; }
}

@foreach(var item in ShopItems)
{
    <MudPaper Class="d-flex gap-4 pa-2" Height="190px" Square="true">
            <MudPaper Class="flex-none d-flex pa-3 mud-theme-primary" Width="180px" Height="180px" Elevation="2">
            @if (string.IsNullOrWhiteSpace(item.BlobLink))
            {
                <img style="width: 100%; height: 100%;" src="https://www.sharabangla.com/wp-content/uploads/woocommerce-placeholder-300x300.png" />
            }
            else
            {
                <img style="width: 100%; height: 100%;" src="@item.BlobLink" /> 
            }
            </MudPaper>
            <MudPaper Class="flex-1 pa-3 flex-wrap" Elevation="1">
                <MudText Class="d-flex" Typo="Typo.h5">@item.Name</MudText>
                <MudDivider Class="d-flex" DividerType="DividerType.Middle" />
                <MudText Class="d-flex" Typo="Typo.body1">@item.Description</MudText>
                <MudText Class="d-flex" Typo="Typo.body2">#@item.Id</MudText>
            </MudPaper>
            <MudPaper Class="flex-none pa-4" Elevation="2" Width="200px">
                <MudContainer Class="d-flex flex-column justify-center">
                    <div class="shop-item-price-wrap">
                        <MudText Typo="Typo.h6">@item.Price UAH</MudText>
                    </div>
                    <MudDivider Class="ma-3" DividerType="DividerType.Middle" />
                    <MudButton OnClick="events=> OnAddToCart(item)" Variant="Variant.Outlined" Color="Color.Secondary">Add to cart</MudButton>
                </MudContainer>
            </MudPaper>
    </MudPaper>
    <MudDivider />
}
@code {
    private async Task OnAddToCart(ModuleEntity item)
    {
        CartItems.Add(item);
        await JsRuntime.InvokeVoidAsync("UpdateCookie", ConstNames.Cart, JsonSerializer.Serialize(CartItems), 30);
        await CartItemsChanged.InvokeAsync(CartItems);
    }
}