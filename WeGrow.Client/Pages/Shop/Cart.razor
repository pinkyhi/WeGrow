@using System.Text.Json
@using IdentityModel.Client
@using System.Security.Claims
@using WeGrow.Client.Services
@using WeGrow.Core.Resources
@using WeGrow.Models.Entities
@using Microsoft.JSInterop

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private ITokenService TokenService { get; set; }
    [Inject] private IConfiguration Configuration { get; set; }
    [Inject] private IJSRuntime JsRuntime { get; set; }
    [Inject] private IHttpContextAccessor Accessor { get; set; }
    [Inject] private IDialogService DialogService { get; set; }

    [Parameter]
    public List<ModuleEntity> CartItems { get; set; }
    [Parameter]
    public EventCallback<List<ModuleEntity>> CartItemsChanged { get; set; }

    private string ApiUrl { get; set; }
    private Dictionary<ModuleEntity, int> CartViewDictionary { get; set; } = new();
    private decimal TotalPrice = 0;
    private bool toggleCart = false;
    private bool redirectToLogin = false;
}
@{
    CartViewDictionary.Clear();
    TotalPrice = 0;
    foreach(var item in CartItems)
    {
        var kv = CartViewDictionary.FirstOrDefault(x => x.Key.Id == item.Id);
        if (kv.Key != null)
        {
            CartViewDictionary[kv.Key] += 1;
        }
        else
        {
            CartViewDictionary.Add(item, 1);
        }
        TotalPrice += item.Price;
    }
}
@if (redirectToLogin)
{
    <RedirectToLogin />
}
<div class="cart-wrap">
    <div class="cart">
        <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ShoppingCart" OnClick="events => toggleCart = !toggleCart" DisableElevation="true" />
        @if(CartItems?.Count() > 0)
        {
            <h5 class="cart-counter">@CartItems.Count</h5>
        }
    </div>
    <div class="mud-paper mud-elevation-3 cart-list @(toggleCart ? "cart-list-toggle" : "")">
        <MudText Typo="Typo.h4">Cart</MudText>
        <div class="mud-table mud-data-grid mud-xs-table mud-table-dense mud-table-bordered mud-elevation-1">
            <div class="mud-table-container">
                <table class="mud-table-root">
                    <thead class="mud-table-head">
                        <tr class="mud-table-row">
                            <th scope="col" class="mud-table-cell" colspan="1"><span class="column-header">Id</span></th>
                            <th scope="col" class="mud-table-cell" colspan="1"><span class="column-header">Name</span></th>
                            <th scope="col" class="mud-table-cell" colspan="1"><span class="column-header">Count</span></th>
                            <th scope="col" class="mud-table-cell" colspan="1"><span class="column-header">Full price</span></th>
                            <th scope="col" class="mud-table-cell" colspan="1"><span class="column-header"><span class="column-options"></span></span></th>
                        </tr>
                    </thead>
                    <tbody class="mud-table-body">
                        @foreach(var kv in CartViewDictionary)
                        {
                            <tr class="mud-table-row">
                                <td data-label="Id" class="mud-table-cell">@kv.Key.Id</td>
                                <td data-label="Name" class="mud-table-cell">@kv.Key.Name</td>
                                <td data-label="Count" class="mud-table-cell">@kv.Value</td>
                                <td data-label="Full price" class="mud-table-cell">@(kv.Key.Price * kv.Value)</td>
                                <td class="d-flex justify-end mud-table-cell">
                                    <MudIconButton OnClick="events => OnRemoveFromCart(kv.Key)" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot class="mud-table-foot">
                        <tr class="mud-table-row">
                            <td class="mud-table-cell" style="font-weight:600; text-align: center;" colspan="3">
                                @if(CartItems?.Count() > 0){
                                    <MudButton OnClick="OnOrderClicked" Style="padding-top: 7px; width: 80%;" Variant="Variant.Filled" EndIcon="@Icons.Filled.AttachMoney" Color="Color.Success">Order! </MudButton>
                                }
                            </td>
                            <td class="mud-table-cell" style="font-weight:600;" colspan="1">Total price: @TotalPrice UAH</td>
                            <td class="mud-table-cell" style="font-weight:600;" colspan="1"></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>
@code{
    private async Task OnRemoveFromCart(ModuleEntity item)
    {
        CartItems.Remove(item);
        var cookieOptions = new CookieOptions
        {
            Expires = DateTime.Now.AddDays(30)
        };
        await JsRuntime.InvokeVoidAsync("UpdateCookie", ConstNames.Cart, JsonSerializer.Serialize(CartItems), 30);
        await CartItemsChanged.InvokeAsync(CartItems);
    }

    private async Task OnOrderClicked()
    {
        string newOrderId = "";
        var tokenResponse = await TokenService.GetToken("WeGrow.write");
        HttpClient.SetBearerToken(tokenResponse.AccessToken);

        var cartModel = new Dictionary<int, int>(CartViewDictionary.Select(x => new KeyValuePair<int, int>(x.Key.Id, x.Value)));

        var content = JsonContent.Create(cartModel);
        try
        {
            content.Headers.Add(ConstNames.Uid, Accessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        }
        catch(NullReferenceException ex)
        {
            redirectToLogin = true;
            return;
        }
        var result = await HttpClient.PostAsync(new Uri(ApiUrl), content);

        if (result.IsSuccessStatusCode)
        {
            newOrderId = await result.Content.ReadAsStringAsync();
            CartItems.RemoveAll(x => true);
            var parameters = new DialogParameters();
            parameters.Add("ContentText", $"New order with id #{newOrderId} is created. Check it in order tab.");

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            DialogService.Show<OkDialog>("Order created", parameters, options);
            await CartItemsChanged.InvokeAsync(CartItems);
        }
        else
        {
            throw new Exception("Order server error");
        }
        toggleCart = false;
    }

    protected override void OnInitialized()
    {
        ApiUrl = Configuration["apiUrl"] + ApiRoutes.ShopModules;
    }
}