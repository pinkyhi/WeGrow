@using WeGrow.Client.Services
@using WeGrow.Models.Schedules
@using WeGrow.Models.SystemInstances
@code {
    [Inject] public IChartService chartService { get; set; } 
    [Inject] public IScheduleService scheduleService { get; set; } 

    [Parameter]
    public ModuleScheduleModel Schedule { get; set; } = new();

    [Parameter]
    public bool IsCreating { get; set; }

    private int currentDay = 0;
    private bool IsIntervalAddingDialog = false;
}
<MudPaper Outlined="false" Elevation="0" Class="d-flex flex-column flex-1 gap-2">
    <MudText Typo="Typo.h5">Module name: @Schedule.ModuleName</MudText>
    <MudText Typo="Typo.h6">#@Schedule.ModuleInstanceId</MudText>
    <MudText Typo="Typo.h5">Total days count: @Schedule.DaysCount</MudText>

    @if (IsCreating)
    {
        <MudAlert Severity="Severity.Info">Intervals should build solid timeline from first to last day</MudAlert>

        var missingIntervals = scheduleService.GetMissingIntervals(Schedule.DaysCount, Schedule.Intervals);
        @if(missingIntervals.Count > 0)
        {
            <MudAlert Severity="Severity.Warning">Missing intervals: @(string.Join(' ', missingIntervals.Select(x => $"({x.from}-{x.to});")))</MudAlert>
            <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddIntervalClick">Add new interval</MudButton>
            <IntervalCreationDialog From="missingIntervals.First().from" ToMax="missingIntervals.First().to" @bind-visible="IsIntervalAddingDialog" CreateIntervalEvent="AddInterval"/>
        }
    }
    <MudExpansionPanels MultiExpansion="true">
        @for(int i = 0; i < Schedule.Intervals.Count; i++)
        {
            var interval = Schedule.Intervals.ElementAt(i);
            if(interval.DayPatternValues.Count < 2)
            {
                interval.DayPatternValues.Add(0, 0);
                interval.DayPatternValues.Add(24, 10);
            }

            <MudExpansionPanel Text="@($"From: {interval.From}; To: {interval.To};")">
                @if (IsCreating)
                {
                    <MudButton Style="margin-left: auto;" Variant="Variant.Outlined" Color="Color.Error" OnClick="events => RemoveInterval(interval)">Remove this interval</MudButton>
                }
                <ModuleScheduleIntervalComponent @bind-PatternValues="interval.DayPatternValues" ChartName="@Schedule.ModuleSubject.ToString()" IsEditing="IsCreating"/>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudPaper> 

@code{
    private void AddInterval((int, int) fromTo)
    {
        Schedule.Intervals.Add(new ScheduleIntervalModel()
            {
                From = fromTo.Item1,
                To = fromTo.Item2,
                DayPatternValues = new()
            });
    }
    private void AddIntervalClick()
    {
        IsIntervalAddingDialog = true;
    }
    private void RemoveInterval(ScheduleIntervalModel interval)
    {
        Schedule.Intervals.Remove(interval);
    }
}