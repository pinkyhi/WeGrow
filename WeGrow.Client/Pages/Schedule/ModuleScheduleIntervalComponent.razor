@using WeGrow.Client.Services
@using WeGrow.Models.SystemInstances

@code {
    [Inject] public IChartService chartService { get; set; } 

    [Parameter]
    public Dictionary<int, double> PatternValues { get; set; }

    [Parameter]
    public string ChartName { get; set; }

    [Parameter] 
    public bool IsEditing { get; set; }

    [Parameter]
    public EventCallback<Dictionary<int, double>> PatternValuesChanged { get; set; }

    private Dictionary<string, double> DayPatternChart { get; set; }
    private string[] XAxisLabels { get; set; }
    private ChartSeries ChartSeries { get; set; }
    private (int, double) newPoint = (1, 0);
    private List<string> Errors = new List<string>();
    private bool chartIsActual = false;
}
@{
    if (!chartIsActual)
    {
        chartService.CreateExtendedChart(PatternValues, out Dictionary<int, double> extendedChart);
        DayPatternChart = chartService.GetDayChart(extendedChart);
        XAxisLabels = DayPatternChart.Select(x => x.Key).ToArray();
        ChartSeries = new ChartSeries() { Name = ChartName, Data = DayPatternChart.Select(x => x.Value).ToArray() };
        chartIsActual = true;
    }
}
<MudPaper Outlined="false" Elevation="0" Class="d-flex flex-column flex-1 gap-3">
    <MudPaper Class="d-flex" Style="height: 400px;" Elevation="1">
        <MudChart ChartType="ChartType.Line" ChartSeries="@(new List<ChartSeries> {ChartSeries})" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
    </MudPaper>
    @if(Errors.Count > 0)
    {
        @foreach(var error in Errors)
        {
            <MudAlert Severity="Severity.Error">@error</MudAlert>
        }
    }
    <MudPaper Class="d-flex flex-wrap flex-row gap-2 pa-1">
        @if(IsEditing){
            <MudPaper Class="d-inline-flex flex-row mud-theme-success gap-1 pa-2" Style="max-width: 250px;">
                <MudNumericField Min="1" Max="23" Class="d-inline-flex flex-1" @bind-Value="newPoint.Item1" Label="X" Variant="Variant.Outlined" Style="font-size:small; max-height:40px; background-color:white;"/>
                <MudNumericField Min="0" Class="d-inline-flex flex-1" @bind-Value="newPoint.Item2" Label="Y" Variant="Variant.Outlined" Style="font-size:small; max-height:40px; background-color:white;" />
                @if (IsEditing)
                {
                    <MudIconButton Icon="@Icons.Filled.AddCircleOutline" aria-label="delete" OnClick="AddPoint"></MudIconButton>
                }
            </MudPaper>
        }

        @for(int i = 0; i < PatternValues.Count; i++)
        {
            var dot = PatternValues.ElementAt(i);
            if(i == 0 || i == PatternValues.Count - 1)
            {
                <MudPaper Class="d-inline-flex flex-row mud-theme-warning gap-1 pa-2" Style="max-width: 250px;">
                    <MudNumericField Class="d-inline-flex flex-1" Value="dot.Key" Label="X" Disabled="true" Variant="Variant.Outlined" Style="font-size:small; max-height:40px; background-color:white;"/>
                    <MudNumericField Min="0" Class="d-inline-flex flex-1" Value="dot.Value" Label="Y" Variant="Variant.Outlined" Style="font-size:small; max-height:40px; background-color:white;" />
                </MudPaper> 
            }
            else
            {
                <MudPaper Class="d-inline-flex flex-row mud-theme-primary gap-1 pa-2" Style="max-width: 250px;">
                    <MudNumericField Class="d-inline-flex flex-1" Value="dot.Key" Label="X" Disabled="true" Variant="Variant.Outlined" Style="font-size:small; max-height:40px; background-color:white;"/>
                    <MudNumericField T="double" Min="0" ValueChanged="value => OnValueChange(dot.Key, value)"Class="d-inline-flex flex-1" Value="dot.Value" Label="Y" Variant="Variant.Outlined" Style="font-size:small; max-height:40px; background-color:white;" />
                    @if (IsEditing)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="events => DeletePoint(dot.Key)"></MudIconButton>
                    }
                </MudPaper>
            }
        }
    </MudPaper>
    @if (IsEditing)
    {
        <MudPaper Class="d-flex" Elevation="0" Outlined="false">
            <MudButton Variant="Variant.Filled" Color="Color.Success" Style="margin: auto;" OnClick="SaveValues">Save changes for this interval</MudButton>
        </MudPaper>
    }
</MudPaper>
@code{
    private async Task SaveValues()
    {
        await PatternValuesChanged.InvokeAsync(PatternValues);
        chartIsActual = false;
    }
    private void OnValueChange(int key, double value)
    {
        PatternValues[key] = value;
    }
    private void DeletePoint(int key)
    {
        PatternValues.Remove(key);
    }
    private void AddPoint()
    {
        if (!PatternValues.TryAdd(newPoint.Item1, newPoint.Item2))
        {
            if(!Errors.Contains("This time is already occupied"))
            {
                Errors.Add("This time is already occupied");
            }
        }
        else
        {
            Errors.RemoveAll(x => true);
        }
        PatternValues = PatternValues.OrderBy(x => x.Key).ToDictionary(x => x.Key, x => x.Value);
    }
}