@using IdentityModel.Client
@using System.Security.Claims
@using WeGrow.Core.Resources
@using WeGrow.Models.Order
@using WeGrow.Models.Shop

@page "/orders"
@attribute [Authorize]
@if (redirectToLogin)
{
    <RedirectToLogin />
}
 <MudPaper Class="d-flex flex-column pa-5 gap-3">
    @if(isLoading){
        <MudProgressCircular Class="d-flex" Style="height:150px;width:150px;margin:auto;" Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        @foreach(var order in ItemsList)
        {
            decimal orderTotal = 0;
            <MudCard>
                <MudCardContent>
                    <MudAlert Severity="Severity.Normal">#@order.Id</MudAlert>
                    <MudText Typo="Typo.body1">@order.Description</MudText>
                    <MudText Typo="Typo.body2">@order.Date</MudText>
                    <div class="mud-paper mud-elevation-1 receipt-list">
                        <div class="mud-table mud-data-grid mud-xs-table mud-table-dense mud-table-bordered mud-elevation-1">
                            <div class="mud-table-container">
                                <table class="mud-table-root">
                                    <thead class="mud-table-head">
                                        <tr class="mud-table-row">
                                            <th scope="col" class="mud-table-cell" colspan="1"><span class="column-header">Id</span></th>
                                            <th scope="col" class="mud-table-cell" colspan="1"><span class="column-header">Name</span></th>
                                            <th scope="col" class="mud-table-cell" colspan="1"><span class="column-header">Count</span></th>
                                            <th scope="col" class="mud-table-cell" colspan="1"><span class="column-header">Full price</span></th>
                                        </tr>
                                    </thead>
                                    <tbody class="mud-table-body">
                                        @foreach(var kv in order.Receipts)
                                        {
                                            orderTotal = kv.Module.Price * kv.Amount;
                                            <tr class="mud-table-row">
                                                <td data-label="Id" class="mud-table-cell">@kv.Module_Id</td>
                                                <td data-label="Name" class="mud-table-cell">@kv.Module.Name</td>
                                                <td data-label="Count" class="mud-table-cell">@kv.Amount</td>
                                                <td data-label="Full price" class="mud-table-cell">@(kv.Module.Price * kv.Amount)</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot class="mud-table-foot">
                                        <tr class="mud-table-row">
                                            <td class="mud-table-cell" style="font-weight:600; text-align: center;" colspan="3"></td>
                                            <td class="mud-table-cell" style="font-weight:600;" colspan="1">Total price: @orderTotal UAH</td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>

                    <MudText Class="mt-3" Typo="Typo.h5">Status:</MudText>
                    @if (order.Status == Core.Enums.OrderStatus.Unconfirmed)
                    {
                       <MudAlert Severity="Severity.Error">Payment is not received</MudAlert> 
                    }
                    else if(order.Status < Core.Enums.OrderStatus.Sent)
                    {
                        <MudAlert Severity="Severity.Info">Status: @order.Status.ToString()</MudAlert>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Success">Status: Successed</MudAlert>
                    }
                </MudCardContent>
                @if (order.Status == Core.Enums.OrderStatus.Unconfirmed)
                {
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Success">Pay this order</MudButton>
                        <MudButton Style="margin-left:auto" Variant="Variant.Outlined" Color="Color.Error" OnClick="events => OnOrderDeleteClicked(order)">Remove this order</MudButton>
                    </MudCardActions>
                }
            </MudCard>
        }
    }
</MudPaper>
@code{
    private async Task OnOrderDeleteClicked(OrderModel order)
    {
        var tokenResponse = await TokenService.GetToken("WeGrow.write");
        HttpClient.SetBearerToken(tokenResponse.AccessToken);

        var content = JsonContent.Create(order.Id);
        try
        {
            content.Headers.Add(ConstNames.Uid, Accessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        }
        catch(NullReferenceException)
        {
            redirectToLogin = true;
            return;
        }

        var result = await HttpClient.PatchAsync(new Uri(ApiUrl), content);

        if (result.IsSuccessStatusCode)
        {
            ItemsList.Remove(order);
        }
        else
        {
            throw new Exception("Order delete server error");
        }
    }
}