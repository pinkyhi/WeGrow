@using IdentityModel.Client
@using Microsoft.AspNetCore.WebUtilities
@using System.Security.Claims
@using WeGrow.Client.Services
@using WeGrow.Core.Resources
@using WeGrow.Models.Grow
@using WeGrow.Models.SystemInstances
@code {
    [Parameter]
    public List<ModuleInstanceViewModel> Items { get; set; }
    [Parameter]
    public EventCallback<List<ModuleInstanceViewModel>> ItemsChanged { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string ApiUrl { get; set; }

    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private IConfiguration Configuration { get; set; }
    [Inject] private IHttpContextAccessor Accessor { get; set; }
    [Inject] private ITokenService TokenService { get; set; }
}
<style type="text/css">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }
</style>
@{
    <MudTable style="border: 2px solid black;" Items="@Items" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Striped="true" Bordered="true" HeaderClass="table-head-bordered" CustomHeader="true" Hover="true" >
        <ToolBarContent>
            <MudText Typo="Typo.h5">@Title</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTHeadRow IsCheckable="true">
                <MudTh>Id</MudTh>
                <MudTh>Module name</MudTh>
                <MudTh>Last response time</MudTh>
                <MudTh>Last update</MudTh>
                <MudTh>Belongs to system</MudTh>
                <MudTh>Actions</MudTh>
            </MudTHeadRow>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Module name">@context.ModuleName</MudTd>
            <MudTd DataLabel="Last response time">@context.LastResponse</MudTd>
            <MudTd DataLabel="Last update">@context.LastResponseItem</MudTd>
            <MudTd DataLabel="Belongs to system">@context.System_Id</MudTd>
            <MudTd DataLabel="Actions">
                @if(context.ModuleType != Core.Enums.ModuleType.Passive)
                {
                    <MudIconButton Icon="@Icons.Filled.Autorenew" aria-label="update" OnClick="events => OnRenew(context)"></MudIconButton>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>

}
@code{
    private async Task OnRenew(ModuleInstanceViewModel item)
    {
        var tokenResponse = await TokenService.GetToken("WeGrow.write");
            HttpClient.SetBearerToken(tokenResponse.AccessToken);
            var uri = QueryHelpers.AddQueryString(ApiUrl + ApiRoutes.GrowModule, "id", item.Id);
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            HttpResponseMessage result = null;

            try
            {
                requestMessage.Headers.Add(ConstNames.Uid, Accessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value);
                result = await HttpClient.SendAsync(requestMessage);
            }
            catch (NullReferenceException)
            {
                throw new Exception("Not authorized");
            }
            finally
            {
                requestMessage.Dispose();
            }
            if (result.IsSuccessStatusCode)
            {
                var responseModel = await result.Content.ReadFromJsonAsync<ModuleUpdateModel>();
                item.LastResponse = responseModel.LastResponse;
                item.LastResponseItem = responseModel.LastResponseItem;

                await ItemsChanged.InvokeAsync(Items);
            }
            else
            {
                throw new Exception("Get data error");
            }
    }
}
