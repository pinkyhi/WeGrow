@typeparam TItem where TItem : new()
@using System.Diagnostics.CodeAnalysis
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using IdentityModel.Client
@using Microsoft.AspNetCore.WebUtilities
@using WeGrow.Client.Services
@using WeGrow.Core.Enums
@using System.Globalization;
@using WeGrow.Models.Entities

@{
    var itemType = Items.GetType().GenericTypeArguments.First();
    Properties = itemType.GetProperties();
    IdProperties = Properties?.Where(p => Attribute.IsDefined(p, typeof(KeyAttribute)));
    if(IdProperties.Count() == 0)
    {
        IdProperties = Properties?.Where(p => Attribute.IsDefined(p, typeof(RequiredAttribute)));
    }
    bool addRow = true;
}

<table class="table">
    <thead>
        <tr><td>@TableTitle</td></tr>
    </thead>
    <tbody>
        <tr>
            @foreach (var prop in Properties)
            {
                <th>
                    @prop.Name
                </th>
            }
            <th>Actions</th>
        </tr>
        @foreach (var item in Items)
        {
            <tr>
                @foreach (var prop in Properties)
                {
                    var propValue = prop.GetValue(item) ?? "";
                    var propType = prop.GetMethod.ReturnType;

                    @if(prop.GetCustomAttribute<KeyAttribute>() != null)
                    {
                        if (addRow)
                        {
                            <td>Auto</td>
                        }
                        else
                        {
                            <td>
                                @propValue
                            </td>
                        }
                    }
                    else if(prop.GetCustomAttribute<RequiredAttribute>() != null && !addRow)
                    {
                        <td>
                            @propValue
                        </td>
                    }
                    else
                    {
                        if (propType.IsEnum)
                        {
                            <td>
                                <select class="enum-select"  @onchange="events => OnChangeEvent(events, prop, item)">
                                    @{
                                        var enumValues = Enum.GetValues(propType);
                                        foreach(var val in enumValues)
                                        {
                                            if(val.Equals(propValue))
                                            {
                                                <option value="@val" selected>
                                                    @val
                                                </option>
                                            }
                                            else
                                            {
                                            <option value="@val">
                                                @val
                                            </option>
                                            }
                                        }
                                    }
                                </select>
                            </td>
                        }
                        else if(propType == typeof(Boolean))
                        {
                            <td>
                                <input @onchange="events => OnChangeEvent(events, prop, item)" type="checkbox" checked="@propValue">
                            </td>
                        }
                        else
                        {
                            <td>
                                <input @onchange="events => OnChangeEvent(events, prop, item)"  type="text" value="@propValue"/>
                            </td>
                        } 
                    }

                }
                <td>
                    @if(addRow){
                        <button @onclick="events => AddEvent(events, item)">Add</button>
                    }
                    else{
                        <button @onclick="events => DeleteEvent(events, item)">Delete</button>
                        @if (ChangedItems.GetValueOrDefault(item) != null)
                        {
                            <button @onclick="events => EditEvent(events, item)">Edit</button>
                        }
                    }
                </td>
            </tr>
            @if (addRow)
            {
                addRow = false;
            }
        }
    </tbody>
</table>
@code {
    private async Task OnChangeEvent(ChangeEventArgs e, PropertyInfo property, TItem item)
    {
        var valueStr = e.Value.ToString();
        var propValueType = property.PropertyType;
        var changedItem = ChangedItems.GetValueOrDefault(item);
        dynamic changedItemValue = valueStr;
        if (propValueType.IsEnum)
        {
            changedItemValue = Enum.Parse(propValueType, changedItemValue, true);
        }
        else if (propValueType == typeof(Decimal))
        {
            changedItemValue = Decimal.Parse(changedItemValue);
        }
        else if (propValueType == typeof(Int32))
        {
            changedItemValue = Int32.Parse(changedItemValue);
        }
        else if (propValueType == typeof(DateTime))
        {
            changedItemValue = DateTime.Parse(changedItemValue);
        }
        else if (propValueType == typeof(TimeSpan))
        {
            changedItemValue = TimeSpan.Parse(changedItemValue);
        }
        else if (propValueType == typeof(Boolean))
        {
            changedItemValue = Boolean.Parse(changedItemValue);
        }

        if(changedItem != null)
        {
            property.SetValue(changedItem, changedItemValue);
            if(CompareItems(changedItem, item))
            {
                ChangedItems.Remove(item);
            }
        }
        else
        {
            var copyItem = new TItem();
            CopyItemValues(item, ref copyItem);
            property.SetValue(copyItem, changedItemValue);
            ChangedItems.Add(item, copyItem);
        }
    }

    private async Task DeleteEvent(MouseEventArgs e, TItem item)
    {
        var tokenResponse = await TokenService.GetAdminToken();
        HttpClient.SetBearerToken(tokenResponse.AccessToken);
        var id = GetIdValues(item);
        var uri = QueryHelpers.AddQueryString(ApiUrl, id);
        var result = await HttpClient.DeleteAsync(new Uri(uri));

        if (result.IsSuccessStatusCode)
        {
            Items.Remove(item);
        }
        else
        {
            throw new Exception("Delete server error");
        }
    }

    private async Task AddEvent(MouseEventArgs e, TItem item)
    {
        var changedItem = ChangedItems.GetValueOrDefault(item);
        if (changedItem != null)
        {

            var tokenResponse = await TokenService.GetAdminToken();
            HttpClient.SetBearerToken(tokenResponse.AccessToken);

            var uri = ApiUrl;
            var result = await HttpClient.PostAsync(new Uri(uri), JsonContent.Create(changedItem));

            if (result.IsSuccessStatusCode)
            {
                var newItem = await result.Content.ReadFromJsonAsync<TItem>();
                Items.Add(newItem);

                // ChangedItems.Remove(item);
            }
            else
            {
                throw new Exception("Adding server error");
            } 
        }        
    }

    private async Task EditEvent(MouseEventArgs e, TItem item)
    {
        var changedItem = ChangedItems.GetValueOrDefault(item);
        if (changedItem != null)
        {

            var tokenResponse = await TokenService.GetAdminToken();
            HttpClient.SetBearerToken(tokenResponse.AccessToken);

            var uri = ApiUrl;
            var result = await HttpClient.PatchAsync(new Uri(uri), JsonContent.Create(new[] { item, changedItem }));

            if (result.IsSuccessStatusCode)
            {
                ChangedItems.Remove(item);
            }
            else
            {
                throw new Exception("Edit server error");
            } 
        }        
    }
}